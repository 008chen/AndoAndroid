/**
 * gradle相关配置
 * https://github.com/javakam/ModuleApp/blob/c892a42bef2354068d6176a3a99f1723f5aca2ea/app/build.gradle
 */
apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
//apply plugin: 'realm-android'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

/*
Android Studio2.3.3到3.0版本后，同时也更新了gradle到4.1后,出现问题：
Error:android-apt plugin is incompatible with the Android Gradle plugin.
Please use 'annotationProcessor' configuration instead.
同时：apt dependencies["butterknife-compiler"]，apt改为 annotationProcessor */
//apply plugin: 'android-apt'

def config = rootProject.ext.android
def deps = rootProject.ext.dependencies

//获取产品的名字
def getProductName() {
    return "improve"
}
//获取当前系统的时间
def releaseTime() {
    return new Date().format("yyyy-MM-dd_HH_mm_ss")
}

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion
    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //选择要添加的对应cpu类型的.so库
        /*ndk {
            biFilters 'armeabi', 'arm64-v8a', 'armeabi-v7a', 'x86'
            //还可以添加...
        }*/

        //当应用不需要支持几十种语言时，去除无用的语言资源
        /*
        注：resConfigs "hdpi", "xhdpi", "xxhdpi", "xxxhdpi"
        在新版本中已经废弃，替代方案是在 gradle 中使用 splits 根据不同的 ABI 以及不同的屏幕密度分别打包。 */
        resConfigs "zh", "en"
        multiDexEnabled true    //突破65535限制
        //renderscriptTargetApi 27
        //renderscriptSupportModeEnabled true

        /*
        manifestPlaceholders 用于替换变量
        https://blog.csdn.net/u011904605/article/details/54664831
        替换多个变量 manifestPlaceholders = [umeng_app_key: "你替代的内容",umeng_app_secret:"你要替换的内容"]*/
        manifestPlaceholders = [channel: "SQ"]

        /*
        没有的话会出现问题：
        Error:All flavors must now belong to a named flavor dimension.
        Learn more at https://d.android.com/r/tools/flavorDimensions-missing-error-message.html
        解决办法是加上   flavorDimensions "versionCode" versionCode就是你的版本号 */
        flavorDimensions String.valueOf(versionCode)

        /*
        新版 gradle 插件不再支持 annotation processors，如果需要使用需要显式声明
        Error:java.lang.RuntimeException: Annotation processors must be explicitly declared now.
        The following dependencies on the compile classpath are found to contain annotation processor.
        Please add them to the annotationProcessor configuration.*/
        // 显式声明支持注解
        javaCompileOptions {
            annotationProcessorOptions {
                // ARouter::Compiler >>> No module name, for more information, look at gradle log.
                // EventBus3 : ReBuild Project之后会在build文件夹下生成MyEventBusIndex.class
                arguments = [moduleName     : project.getName()
                             , eventBusIndex: 'com.improve.modules.eventbus3.MyEventBusIndex']

                includeCompileClasspath false
            }
        }

        //打包时间
        resValue "string", "build_time", releaseTime()
    }

    //签名文件配置
    signingConfigs {
        sign_debug {
        }
        sign_xiaomi {
            keyAlias 'ishiqing'
            keyPassword 'lovekam12'
            storeFile file('C:\\fastwork\\android_keystore\\ishiqing\\isq_key.jks')//签名文件路径
            storePassword 'lovekam12'
        }
    }
    // release版本中设置了开启混淆，并且定义了混淆文件的位置
    /* release和debug的差异主要在于是否可以在设备上调试应用以及APK如何签名。
    debug   版本会被使用已知的名称/密码自动生成的密钥/证书签名。
    release 版本在构建过程中不会被签名，需要构建后再签名。*/
    buildTypes {
        release {
            //更改AndroidManifest.xml中预先定义好占位符信息:
            /*
             In AndroidManifest.xml :
             <meta-data
                android:name="CHANNEL"
                android:value="${CHANNEL}" /> */
            // manifestPlaceholders = [app_icon: "@drawable/icon"]

            // 正式版不显示log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //是否zip对齐
            zipAlignEnabled true
            // 缩减resource文件，删除项目中没用到的资源文件
            // 当项目使用了很多第三方库的时候，这些库包含了很多资源文件，但是项目只使用了其中一小部分
            shrinkResources false
            //Proguard
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //修改生成的apk名字，格式为 app名_版本号_打包时间_渠道名_release.apk
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def oldFile = output.outputFile
                    if (variant.buildType.name.equals('release')) {
                        outputFileName = getProductName() + "_v${variant.productFlavors[0].versionName}_${releaseTime()}_" + variant.productFlavors[0].name + '_release.apk'
                    }
                }
            }
        }

        debug {
            // 正式版不显示log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            shrinkResources false
            minifyEnabled false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    /*创建一个新的ProductFlavor的步骤为：在productFlavors容器下添加一个自定义名称的元素，使用闭包进行配置*/
    productFlavors {
        demo {
            //manifestPlaceholders = [CHANNEL: "SQ"]

            //buildConfigField -- TreeMap
            buildConfigField "String", "SERVER_URL", '"http://www.jooy.top/SQ/MobileProcess/"'
            buildConfigField "String", "CONFIG_FILE_NAME", '"SQ_Config.json"'
            buildConfigField('String', 'ROOT_DIR', '"SqGeneral"')
            buildConfigField "String", "APP_NAME", '"Feel"'
            buildConfigField "boolean", "ISSERVICEDL", 'true'
            versionCode 1
            versionName "1.0"
            //签名
            //signingConfig signingConfigs.sign_debug
        }
//        demo {
//            //同上...
//            //signingConfig signingConfigs.sign_xiaomi
//        }
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [CHANNEL: name]
    }

    //recommend
    dexOptions {
        jumboMode = true
        javaMaxHeapSize "4g"
        jumboMode true
    }

    dataBinding {
        enabled = true
    }

    //在Android视图下显示 jniLibs 文件夹
    /*sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }*/

    //指定Java版本，支持Lambda表达式
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //排除不想添加到apk中的文件
    packagingOptions {
        exclude('META-INF/rxjava.properties')
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    //Android lint 自动检测并删除无用资源  http://blog.csdn.net/imesong/article/details/49187695
    lintOptions {
        showAll false
        //build release 版本 时 开启lint 检测
        checkReleaseBuilds false
        //lint 遇到 error 时继续构建
        abortOnError false

        //disable 'InvalidPackage'
        //只要添加下面这一句就可以了
        //disable 'MissingTranslation'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation files('libs/nineoldandroids-2.4.0.jar')

    //
    implementation 'com.ando:ando-base:1.0.1'

    // RxJava & Retrofit & Glide4
    implementation deps["gson"]
    implementation deps["rxjava2"]
    implementation deps["rxandroid"]
    implementation deps["rxbinding2"]
    implementation deps["okhttp"]
    implementation deps["okhttp_logging_interceptor"]
    implementation deps["retrofit"]
    implementation deps["retrofit_converter_gson"]
    implementation deps["retrofit_adapter_rxjava2"]

    // 重：annotationProcessor 不能从 library 继承！交给子模块实现！
    // annotationProcessor deps.arouter.compiler

    implementation deps["glide"]
    annotationProcessor deps["glide_compiler"]
    implementation deps["arouter"]
    annotationProcessor deps["arouter_compiler"]
    implementation deps["eventbus"]
    annotationProcessor deps["eventbus_annotation_processor"]

    implementation deps["greendao"]
    implementation deps["qmui"]
    implementation deps["recycler_helper"]
    implementation deps["flexbox"]
    implementation deps["smarttable"]

    //----------------------------------Support XML WebService-------------------------------------//

    implementation('com.squareup.retrofit2:converter-simplexml:2.4.0') {
        exclude module: 'stax'
        exclude module: 'stax-api'
        exclude module: 'xpp3'
    }

    //leakcanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'



    implementation 'co.lujun:androidtagview:1.1.7'

    // 引入子模块后，ARouter才会找到该模块！》》》There's no router matched!
    /*if (isModule.toBoolean()) {
        api project(':sqretrofit')
    }*/

    // Android 无法使用 javax.* 问题 -- 或是拷贝一个rt.jar放到libs里面
    // provided files ('C:\fastwork\Java\jdk1.8.0_162\jre\lib')


    //Jetpack
//    implementation deps["x_app_compat"]
//    implementation deps["x_annotations"]
//    implementation deps["x_recyclerview"]
//    implementation deps["x_cardview"]
//    implementation deps["x_design"]
//    implementation deps["x_core_utils"]
//    implementation deps["x_fragment_runtime"]
//    implementation deps["x_lifecycle_extensions"]

}

greendao {
    schemaVersion 1 // 数据库版本号
    // 设置DaoMaster、DaoSession、Dao 包名, 一般为app包名+生成文件的文件夹名
    daoPackage 'com.improve.data.dao'
    //设置DaoMaster、DaoSession、Dao目录，生成文件路径
    targetGenDir 'src/main/java'
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

