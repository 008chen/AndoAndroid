package com.improve.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.improve.data.cnodc.CocBookBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COC_BOOK_BEAN".
*/
public class CocBookBeanDao extends AbstractDao<CocBookBean, String> {

    public static final String TABLENAME = "COC_BOOK_BEAN";

    /**
     * Properties of entity CocBookBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Abgdt = new Property(0, String.class, "abgdt", false, "ABGDT");
        public final static Property Anlkl = new Property(1, String.class, "anlkl", false, "ANLKL");
        public final static Property Anln1 = new Property(2, String.class, "anln1", false, "ANLN1");
        public final static Property Bukrs = new Property(3, String.class, "bukrs", false, "BUKRS");
        public final static Property Herst = new Property(4, String.class, "herst", false, "HERST");
        public final static Property Id = new Property(5, String.class, "id", true, "ID");
        public final static Property Kostl = new Property(6, String.class, "kostl", false, "KOSTL");
        public final static Property Lease = new Property(7, String.class, "lease", false, "LEASE");
        public final static Property LtextC = new Property(8, String.class, "ltextC", false, "LTEXT_C");
        public final static Property LtextP = new Property(9, String.class, "ltextP", false, "LTEXT_P");
        public final static Property Prctr = new Property(10, String.class, "prctr", false, "PRCTR");
        public final static Property Txa50 = new Property(11, String.class, "txa50", false, "TXA50");
        public final static Property Txk50 = new Property(12, String.class, "txk50", false, "TXK50");
        public final static Property Txt50 = new Property(13, String.class, "txt50", false, "TXT50");
        public final static Property Xstil = new Property(14, String.class, "xstil", false, "XSTIL");
        public final static Property Zbgr = new Property(15, String.class, "zbgr", false, "ZBGR");
        public final static Property Zbyzd1 = new Property(16, String.class, "zbyzd1", false, "ZBYZD1");
        public final static Property Zbyzd2 = new Property(17, String.class, "zbyzd2", false, "ZBYZD2");
        public final static Property Zbyzd3 = new Property(18, String.class, "zbyzd3", false, "ZBYZD3");
        public final static Property Zccbh = new Property(19, String.class, "zccbh", false, "ZCCBH");
        public final static Property Zccrq1 = new Property(20, String.class, "zccrq1", false, "ZCCRQ1");
        public final static Property Zcfdd = new Property(21, String.class, "zcfdd", false, "ZCFDD");
        public final static Property ZcharItem12 = new Property(22, String.class, "zcharItem12", false, "ZCHAR_ITEM12");
        public final static Property Zcpjh = new Property(23, String.class, "zcpjh", false, "ZCPJH");
        public final static Property Zsczt = new Property(24, String.class, "zsczt", false, "ZSCZT");
        public final static Property Zssdwmc = new Property(25, String.class, "zssdwmc", false, "ZSSDWMC");
        public final static Property Zsyzt = new Property(26, String.class, "zsyzt", false, "ZSYZT");
        public final static Property Zywzt = new Property(27, String.class, "zywzt", false, "ZYWZT");
        public final static Property Zzcml = new Property(28, String.class, "zzcml", false, "ZZCML");
        public final static Property Zzcmlmc = new Property(29, String.class, "zzcmlmc", false, "ZZCMLMC");
        public final static Property Zzdmc = new Property(30, String.class, "zzdmc", false, "ZZDMC");
    }


    public CocBookBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CocBookBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COC_BOOK_BEAN\" (" + //
                "\"ABGDT\" TEXT," + // 0: abgdt
                "\"ANLKL\" TEXT," + // 1: anlkl
                "\"ANLN1\" TEXT," + // 2: anln1
                "\"BUKRS\" TEXT," + // 3: bukrs
                "\"HERST\" TEXT," + // 4: herst
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 5: id
                "\"KOSTL\" TEXT," + // 6: kostl
                "\"LEASE\" TEXT," + // 7: lease
                "\"LTEXT_C\" TEXT," + // 8: ltextC
                "\"LTEXT_P\" TEXT," + // 9: ltextP
                "\"PRCTR\" TEXT," + // 10: prctr
                "\"TXA50\" TEXT," + // 11: txa50
                "\"TXK50\" TEXT," + // 12: txk50
                "\"TXT50\" TEXT," + // 13: txt50
                "\"XSTIL\" TEXT," + // 14: xstil
                "\"ZBGR\" TEXT," + // 15: zbgr
                "\"ZBYZD1\" TEXT," + // 16: zbyzd1
                "\"ZBYZD2\" TEXT," + // 17: zbyzd2
                "\"ZBYZD3\" TEXT," + // 18: zbyzd3
                "\"ZCCBH\" TEXT," + // 19: zccbh
                "\"ZCCRQ1\" TEXT," + // 20: zccrq1
                "\"ZCFDD\" TEXT," + // 21: zcfdd
                "\"ZCHAR_ITEM12\" TEXT," + // 22: zcharItem12
                "\"ZCPJH\" TEXT," + // 23: zcpjh
                "\"ZSCZT\" TEXT," + // 24: zsczt
                "\"ZSSDWMC\" TEXT," + // 25: zssdwmc
                "\"ZSYZT\" TEXT," + // 26: zsyzt
                "\"ZYWZT\" TEXT," + // 27: zywzt
                "\"ZZCML\" TEXT," + // 28: zzcml
                "\"ZZCMLMC\" TEXT," + // 29: zzcmlmc
                "\"ZZDMC\" TEXT);"); // 30: zzdmc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COC_BOOK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CocBookBean entity) {
        stmt.clearBindings();
 
        String abgdt = entity.getAbgdt();
        if (abgdt != null) {
            stmt.bindString(1, abgdt);
        }
 
        String anlkl = entity.getAnlkl();
        if (anlkl != null) {
            stmt.bindString(2, anlkl);
        }
 
        String anln1 = entity.getAnln1();
        if (anln1 != null) {
            stmt.bindString(3, anln1);
        }
 
        String bukrs = entity.getBukrs();
        if (bukrs != null) {
            stmt.bindString(4, bukrs);
        }
 
        String herst = entity.getHerst();
        if (herst != null) {
            stmt.bindString(5, herst);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(6, id);
        }
 
        String kostl = entity.getKostl();
        if (kostl != null) {
            stmt.bindString(7, kostl);
        }
 
        String lease = entity.getLease();
        if (lease != null) {
            stmt.bindString(8, lease);
        }
 
        String ltextC = entity.getLtextC();
        if (ltextC != null) {
            stmt.bindString(9, ltextC);
        }
 
        String ltextP = entity.getLtextP();
        if (ltextP != null) {
            stmt.bindString(10, ltextP);
        }
 
        String prctr = entity.getPrctr();
        if (prctr != null) {
            stmt.bindString(11, prctr);
        }
 
        String txa50 = entity.getTxa50();
        if (txa50 != null) {
            stmt.bindString(12, txa50);
        }
 
        String txk50 = entity.getTxk50();
        if (txk50 != null) {
            stmt.bindString(13, txk50);
        }
 
        String txt50 = entity.getTxt50();
        if (txt50 != null) {
            stmt.bindString(14, txt50);
        }
 
        String xstil = entity.getXstil();
        if (xstil != null) {
            stmt.bindString(15, xstil);
        }
 
        String zbgr = entity.getZbgr();
        if (zbgr != null) {
            stmt.bindString(16, zbgr);
        }
 
        String zbyzd1 = entity.getZbyzd1();
        if (zbyzd1 != null) {
            stmt.bindString(17, zbyzd1);
        }
 
        String zbyzd2 = entity.getZbyzd2();
        if (zbyzd2 != null) {
            stmt.bindString(18, zbyzd2);
        }
 
        String zbyzd3 = entity.getZbyzd3();
        if (zbyzd3 != null) {
            stmt.bindString(19, zbyzd3);
        }
 
        String zccbh = entity.getZccbh();
        if (zccbh != null) {
            stmt.bindString(20, zccbh);
        }
 
        String zccrq1 = entity.getZccrq1();
        if (zccrq1 != null) {
            stmt.bindString(21, zccrq1);
        }
 
        String zcfdd = entity.getZcfdd();
        if (zcfdd != null) {
            stmt.bindString(22, zcfdd);
        }
 
        String zcharItem12 = entity.getZcharItem12();
        if (zcharItem12 != null) {
            stmt.bindString(23, zcharItem12);
        }
 
        String zcpjh = entity.getZcpjh();
        if (zcpjh != null) {
            stmt.bindString(24, zcpjh);
        }
 
        String zsczt = entity.getZsczt();
        if (zsczt != null) {
            stmt.bindString(25, zsczt);
        }
 
        String zssdwmc = entity.getZssdwmc();
        if (zssdwmc != null) {
            stmt.bindString(26, zssdwmc);
        }
 
        String zsyzt = entity.getZsyzt();
        if (zsyzt != null) {
            stmt.bindString(27, zsyzt);
        }
 
        String zywzt = entity.getZywzt();
        if (zywzt != null) {
            stmt.bindString(28, zywzt);
        }
 
        String zzcml = entity.getZzcml();
        if (zzcml != null) {
            stmt.bindString(29, zzcml);
        }
 
        String zzcmlmc = entity.getZzcmlmc();
        if (zzcmlmc != null) {
            stmt.bindString(30, zzcmlmc);
        }
 
        String zzdmc = entity.getZzdmc();
        if (zzdmc != null) {
            stmt.bindString(31, zzdmc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CocBookBean entity) {
        stmt.clearBindings();
 
        String abgdt = entity.getAbgdt();
        if (abgdt != null) {
            stmt.bindString(1, abgdt);
        }
 
        String anlkl = entity.getAnlkl();
        if (anlkl != null) {
            stmt.bindString(2, anlkl);
        }
 
        String anln1 = entity.getAnln1();
        if (anln1 != null) {
            stmt.bindString(3, anln1);
        }
 
        String bukrs = entity.getBukrs();
        if (bukrs != null) {
            stmt.bindString(4, bukrs);
        }
 
        String herst = entity.getHerst();
        if (herst != null) {
            stmt.bindString(5, herst);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(6, id);
        }
 
        String kostl = entity.getKostl();
        if (kostl != null) {
            stmt.bindString(7, kostl);
        }
 
        String lease = entity.getLease();
        if (lease != null) {
            stmt.bindString(8, lease);
        }
 
        String ltextC = entity.getLtextC();
        if (ltextC != null) {
            stmt.bindString(9, ltextC);
        }
 
        String ltextP = entity.getLtextP();
        if (ltextP != null) {
            stmt.bindString(10, ltextP);
        }
 
        String prctr = entity.getPrctr();
        if (prctr != null) {
            stmt.bindString(11, prctr);
        }
 
        String txa50 = entity.getTxa50();
        if (txa50 != null) {
            stmt.bindString(12, txa50);
        }
 
        String txk50 = entity.getTxk50();
        if (txk50 != null) {
            stmt.bindString(13, txk50);
        }
 
        String txt50 = entity.getTxt50();
        if (txt50 != null) {
            stmt.bindString(14, txt50);
        }
 
        String xstil = entity.getXstil();
        if (xstil != null) {
            stmt.bindString(15, xstil);
        }
 
        String zbgr = entity.getZbgr();
        if (zbgr != null) {
            stmt.bindString(16, zbgr);
        }
 
        String zbyzd1 = entity.getZbyzd1();
        if (zbyzd1 != null) {
            stmt.bindString(17, zbyzd1);
        }
 
        String zbyzd2 = entity.getZbyzd2();
        if (zbyzd2 != null) {
            stmt.bindString(18, zbyzd2);
        }
 
        String zbyzd3 = entity.getZbyzd3();
        if (zbyzd3 != null) {
            stmt.bindString(19, zbyzd3);
        }
 
        String zccbh = entity.getZccbh();
        if (zccbh != null) {
            stmt.bindString(20, zccbh);
        }
 
        String zccrq1 = entity.getZccrq1();
        if (zccrq1 != null) {
            stmt.bindString(21, zccrq1);
        }
 
        String zcfdd = entity.getZcfdd();
        if (zcfdd != null) {
            stmt.bindString(22, zcfdd);
        }
 
        String zcharItem12 = entity.getZcharItem12();
        if (zcharItem12 != null) {
            stmt.bindString(23, zcharItem12);
        }
 
        String zcpjh = entity.getZcpjh();
        if (zcpjh != null) {
            stmt.bindString(24, zcpjh);
        }
 
        String zsczt = entity.getZsczt();
        if (zsczt != null) {
            stmt.bindString(25, zsczt);
        }
 
        String zssdwmc = entity.getZssdwmc();
        if (zssdwmc != null) {
            stmt.bindString(26, zssdwmc);
        }
 
        String zsyzt = entity.getZsyzt();
        if (zsyzt != null) {
            stmt.bindString(27, zsyzt);
        }
 
        String zywzt = entity.getZywzt();
        if (zywzt != null) {
            stmt.bindString(28, zywzt);
        }
 
        String zzcml = entity.getZzcml();
        if (zzcml != null) {
            stmt.bindString(29, zzcml);
        }
 
        String zzcmlmc = entity.getZzcmlmc();
        if (zzcmlmc != null) {
            stmt.bindString(30, zzcmlmc);
        }
 
        String zzdmc = entity.getZzdmc();
        if (zzdmc != null) {
            stmt.bindString(31, zzdmc);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5);
    }    

    @Override
    public CocBookBean readEntity(Cursor cursor, int offset) {
        CocBookBean entity = new CocBookBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // abgdt
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // anlkl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // anln1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bukrs
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // herst
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // kostl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lease
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ltextC
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ltextP
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // prctr
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // txa50
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // txk50
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // txt50
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // xstil
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // zbgr
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // zbyzd1
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // zbyzd2
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // zbyzd3
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // zccbh
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // zccrq1
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // zcfdd
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // zcharItem12
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // zcpjh
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // zsczt
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // zssdwmc
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // zsyzt
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // zywzt
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // zzcml
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // zzcmlmc
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30) // zzdmc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CocBookBean entity, int offset) {
        entity.setAbgdt(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAnlkl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAnln1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBukrs(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHerst(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKostl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLease(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLtextC(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLtextP(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPrctr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTxa50(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTxk50(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTxt50(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setXstil(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setZbgr(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setZbyzd1(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setZbyzd2(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setZbyzd3(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setZccbh(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setZccrq1(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setZcfdd(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setZcharItem12(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setZcpjh(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setZsczt(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setZssdwmc(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setZsyzt(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setZywzt(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setZzcml(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setZzcmlmc(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setZzdmc(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CocBookBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CocBookBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CocBookBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
