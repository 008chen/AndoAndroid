package com.improve.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.improve.data.bean.GreenRole;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GREEN_ROLE".
*/
public class GreenRoleDao extends AbstractDao<GreenRole, String> {

    public static final String TABLENAME = "GREEN_ROLE";

    /**
     * Properties of entity GreenRole.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Rid = new Property(0, String.class, "rid", true, "RID");
    }


    public GreenRoleDao(DaoConfig config) {
        super(config);
    }
    
    public GreenRoleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GREEN_ROLE\" (" + //
                "\"RID\" TEXT PRIMARY KEY NOT NULL );"); // 0: rid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_ROLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GreenRole entity) {
        stmt.clearBindings();
 
        String rid = entity.getRid();
        if (rid != null) {
            stmt.bindString(1, rid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GreenRole entity) {
        stmt.clearBindings();
 
        String rid = entity.getRid();
        if (rid != null) {
            stmt.bindString(1, rid);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GreenRole readEntity(Cursor cursor, int offset) {
        GreenRole entity = new GreenRole( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // rid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GreenRole entity, int offset) {
        entity.setRid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GreenRole entity, long rowId) {
        return entity.getRid();
    }
    
    @Override
    public String getKey(GreenRole entity) {
        if(entity != null) {
            return entity.getRid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GreenRole entity) {
        return entity.getRid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
