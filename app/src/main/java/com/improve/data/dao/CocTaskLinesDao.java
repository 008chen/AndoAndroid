package com.improve.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.improve.data.cnodc.CocTaskLines;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COC_TASK_LINES".
*/
public class CocTaskLinesDao extends AbstractDao<CocTaskLines, String> {

    public static final String TABLENAME = "COC_TASK_LINES";

    /**
     * Properties of entity CocTaskLines.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property TaskId = new Property(1, String.class, "taskId", false, "TASK_ID");
        public final static Property TaskNum = new Property(2, String.class, "taskNum", false, "TASK_NUM");
        public final static Property Zcfdd = new Property(3, String.class, "zcfdd", false, "ZCFDD");
        public final static Property Position = new Property(4, String.class, "position", false, "POSITION");
        public final static Property ZcharItem12 = new Property(5, String.class, "zcharItem12", false, "ZCHAR_ITEM12");
        public final static Property Txa50 = new Property(6, String.class, "txa50", false, "TXA50");
        public final static Property Zccbh = new Property(7, String.class, "zccbh", false, "ZCCBH");
        public final static Property Zbgr = new Property(8, String.class, "zbgr", false, "ZBGR");
        public final static Property DepartmentKostl = new Property(9, String.class, "departmentKostl", false, "DEPARTMENT_KOSTL");
        public final static Property DepartmentName = new Property(10, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property Lease = new Property(11, String.class, "lease", false, "LEASE");
        public final static Property Xstil = new Property(12, String.class, "xstil", false, "XSTIL");
        public final static Property Anln1 = new Property(13, String.class, "anln1", false, "ANLN1");
        public final static Property Txt50 = new Property(14, String.class, "txt50", false, "TXT50");
        public final static Property Rrf = new Property(15, String.class, "rrf", false, "RRF");
    }


    public CocTaskLinesDao(DaoConfig config) {
        super(config);
    }
    
    public CocTaskLinesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COC_TASK_LINES\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TASK_ID\" TEXT," + // 1: taskId
                "\"TASK_NUM\" TEXT," + // 2: taskNum
                "\"ZCFDD\" TEXT," + // 3: zcfdd
                "\"POSITION\" TEXT," + // 4: position
                "\"ZCHAR_ITEM12\" TEXT," + // 5: zcharItem12
                "\"TXA50\" TEXT," + // 6: txa50
                "\"ZCCBH\" TEXT," + // 7: zccbh
                "\"ZBGR\" TEXT," + // 8: zbgr
                "\"DEPARTMENT_KOSTL\" TEXT," + // 9: departmentKostl
                "\"DEPARTMENT_NAME\" TEXT," + // 10: departmentName
                "\"LEASE\" TEXT," + // 11: lease
                "\"XSTIL\" TEXT," + // 12: xstil
                "\"ANLN1\" TEXT," + // 13: anln1
                "\"TXT50\" TEXT," + // 14: txt50
                "\"RRF\" TEXT);"); // 15: rrf
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COC_TASK_LINES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CocTaskLines entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(2, taskId);
        }
 
        String taskNum = entity.getTaskNum();
        if (taskNum != null) {
            stmt.bindString(3, taskNum);
        }
 
        String zcfdd = entity.getZcfdd();
        if (zcfdd != null) {
            stmt.bindString(4, zcfdd);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(5, position);
        }
 
        String zcharItem12 = entity.getZcharItem12();
        if (zcharItem12 != null) {
            stmt.bindString(6, zcharItem12);
        }
 
        String txa50 = entity.getTxa50();
        if (txa50 != null) {
            stmt.bindString(7, txa50);
        }
 
        String zccbh = entity.getZccbh();
        if (zccbh != null) {
            stmt.bindString(8, zccbh);
        }
 
        String zbgr = entity.getZbgr();
        if (zbgr != null) {
            stmt.bindString(9, zbgr);
        }
 
        String departmentKostl = entity.getDepartmentKostl();
        if (departmentKostl != null) {
            stmt.bindString(10, departmentKostl);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(11, departmentName);
        }
 
        String lease = entity.getLease();
        if (lease != null) {
            stmt.bindString(12, lease);
        }
 
        String xstil = entity.getXstil();
        if (xstil != null) {
            stmt.bindString(13, xstil);
        }
 
        String anln1 = entity.getAnln1();
        if (anln1 != null) {
            stmt.bindString(14, anln1);
        }
 
        String txt50 = entity.getTxt50();
        if (txt50 != null) {
            stmt.bindString(15, txt50);
        }
 
        String rrf = entity.getRrf();
        if (rrf != null) {
            stmt.bindString(16, rrf);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CocTaskLines entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(2, taskId);
        }
 
        String taskNum = entity.getTaskNum();
        if (taskNum != null) {
            stmt.bindString(3, taskNum);
        }
 
        String zcfdd = entity.getZcfdd();
        if (zcfdd != null) {
            stmt.bindString(4, zcfdd);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(5, position);
        }
 
        String zcharItem12 = entity.getZcharItem12();
        if (zcharItem12 != null) {
            stmt.bindString(6, zcharItem12);
        }
 
        String txa50 = entity.getTxa50();
        if (txa50 != null) {
            stmt.bindString(7, txa50);
        }
 
        String zccbh = entity.getZccbh();
        if (zccbh != null) {
            stmt.bindString(8, zccbh);
        }
 
        String zbgr = entity.getZbgr();
        if (zbgr != null) {
            stmt.bindString(9, zbgr);
        }
 
        String departmentKostl = entity.getDepartmentKostl();
        if (departmentKostl != null) {
            stmt.bindString(10, departmentKostl);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(11, departmentName);
        }
 
        String lease = entity.getLease();
        if (lease != null) {
            stmt.bindString(12, lease);
        }
 
        String xstil = entity.getXstil();
        if (xstil != null) {
            stmt.bindString(13, xstil);
        }
 
        String anln1 = entity.getAnln1();
        if (anln1 != null) {
            stmt.bindString(14, anln1);
        }
 
        String txt50 = entity.getTxt50();
        if (txt50 != null) {
            stmt.bindString(15, txt50);
        }
 
        String rrf = entity.getRrf();
        if (rrf != null) {
            stmt.bindString(16, rrf);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CocTaskLines readEntity(Cursor cursor, int offset) {
        CocTaskLines entity = new CocTaskLines( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // taskNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zcfdd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // position
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zcharItem12
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // txa50
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // zccbh
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zbgr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // departmentKostl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // departmentName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // lease
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // xstil
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // anln1
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // txt50
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // rrf
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CocTaskLines entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTaskId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaskNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZcfdd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPosition(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZcharItem12(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTxa50(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZccbh(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZbgr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDepartmentKostl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDepartmentName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLease(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setXstil(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAnln1(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTxt50(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRrf(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CocTaskLines entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CocTaskLines entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CocTaskLines entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
