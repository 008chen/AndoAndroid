package com.sq.domain.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.sq.domain.bean.Role;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ROLE".
 */
public class RoleDao extends AbstractDao<Role, String> {

    public static final String TABLENAME = "ROLE";

    /**
     * Properties of entity Role.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Rid = new Property(0, String.class, "rid", true, "RID");
        public final static Property Rname = new Property(1, String.class, "rname", false, "RNAME");
    }


    public RoleDao(DaoConfig config) {
        super(config);
    }

    public RoleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROLE\" (" + //
                "\"RID\" TEXT PRIMARY KEY NOT NULL ," + // 0: rid
                "\"RNAME\" TEXT);"); // 1: rname
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ROLE_RNAME ON \"ROLE\"" +
                " (\"RNAME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Role entity) {
        stmt.clearBindings();
 
        String rid = entity.getRid();
        if (rid != null) {
            stmt.bindString(1, rid);
        }
 
        String rname = entity.getRname();
        if (rname != null) {
            stmt.bindString(2, rname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Role entity) {
        stmt.clearBindings();
 
        String rid = entity.getRid();
        if (rid != null) {
            stmt.bindString(1, rid);
        }
 
        String rname = entity.getRname();
        if (rname != null) {
            stmt.bindString(2, rname);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Role readEntity(Cursor cursor, int offset) {
        Role entity = new Role( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // rid
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // rname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Role entity, int offset) {
        entity.setRid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Role entity, long rowId) {
        return entity.getRid();
    }
    
    @Override
    public String getKey(Role entity) {
        if (entity != null) {
            return entity.getRid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Role entity) {
        return entity.getRid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
