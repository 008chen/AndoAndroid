package com.sq.domain.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.sq.domain.cnodc.CocTaskHeaders;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "COC_TASK_HEADERS".
 */
public class CocTaskHeadersDao extends AbstractDao<CocTaskHeaders, String> {

    public static final String TABLENAME = "COC_TASK_HEADERS";

    /**
     * Properties of entity CocTaskHeaders.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property TaskNum = new Property(1, String.class, "taskNum", false, "TASK_NUM");
        public final static Property Kostl = new Property(2, String.class, "kostl", false, "KOSTL");
        public final static Property Txt50 = new Property(3, String.class, "txt50", false, "TXT50");
        public final static Property ZcharItem12 = new Property(4, String.class, "zcharItem12", false, "ZCHAR_ITEM12");
        public final static Property Lease = new Property(5, String.class, "lease", false, "LEASE");
        public final static Property Zsczt = new Property(6, String.class, "zsczt", false, "ZSCZT");
        public final static Property Status = new Property(7, String.class, "status", false, "STATUS");
        public final static Property StartDate = new Property(8, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(9, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property CreatedBy = new Property(10, String.class, "createdBy", false, "CREATED_BY");
        public final static Property CreationDate = new Property(11, java.util.Date.class, "creationDate", false, "CREATION_DATE");
        public final static Property LastUpdatedBy = new Property(12, String.class, "lastUpdatedBy", false, "LAST_UPDATED_BY");
        public final static Property LastUpdateDate = new Property(13, java.util.Date.class, "lastUpdateDate", false, "LAST_UPDATE_DATE");
    }


    public CocTaskHeadersDao(DaoConfig config) {
        super(config);
    }

    public CocTaskHeadersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"COC_TASK_HEADERS\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TASK_NUM\" TEXT," + // 1: taskNum
                "\"KOSTL\" TEXT," + // 2: kostl
                "\"TXT50\" TEXT," + // 3: txt50
                "\"ZCHAR_ITEM12\" TEXT," + // 4: zcharItem12
                "\"LEASE\" TEXT," + // 5: lease
                "\"ZSCZT\" TEXT," + // 6: zsczt
                "\"STATUS\" TEXT," + // 7: status
                "\"START_DATE\" INTEGER," + // 8: startDate
                "\"END_DATE\" INTEGER," + // 9: endDate
                "\"CREATED_BY\" TEXT," + // 10: createdBy
                "\"CREATION_DATE\" INTEGER," + // 11: creationDate
                "\"LAST_UPDATED_BY\" TEXT," + // 12: lastUpdatedBy
                "\"LAST_UPDATE_DATE\" INTEGER);"); // 13: lastUpdateDate
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COC_TASK_HEADERS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CocTaskHeaders entity) {
        stmt.clearBindings();

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }

        String taskNum = entity.getTaskNum();
        if (taskNum != null) {
            stmt.bindString(2, taskNum);
        }

        String kostl = entity.getKostl();
        if (kostl != null) {
            stmt.bindString(3, kostl);
        }

        String txt50 = entity.getTxt50();
        if (txt50 != null) {
            stmt.bindString(4, txt50);
        }

        String zcharItem12 = entity.getZcharItem12();
        if (zcharItem12 != null) {
            stmt.bindString(5, zcharItem12);
        }

        String lease = entity.getLease();
        if (lease != null) {
            stmt.bindString(6, lease);
        }

        String zsczt = entity.getZsczt();
        if (zsczt != null) {
            stmt.bindString(7, zsczt);
        }

        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(8, status);
        }

        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(9, startDate.getTime());
        }

        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(10, endDate.getTime());
        }

        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(11, createdBy);
        }

        java.util.Date creationDate = entity.getCreationDate();
        if (creationDate != null) {
            stmt.bindLong(12, creationDate.getTime());
        }

        String lastUpdatedBy = entity.getLastUpdatedBy();
        if (lastUpdatedBy != null) {
            stmt.bindString(13, lastUpdatedBy);
        }

        java.util.Date lastUpdateDate = entity.getLastUpdateDate();
        if (lastUpdateDate != null) {
            stmt.bindLong(14, lastUpdateDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CocTaskHeaders entity) {
        stmt.clearBindings();

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }

        String taskNum = entity.getTaskNum();
        if (taskNum != null) {
            stmt.bindString(2, taskNum);
        }

        String kostl = entity.getKostl();
        if (kostl != null) {
            stmt.bindString(3, kostl);
        }

        String txt50 = entity.getTxt50();
        if (txt50 != null) {
            stmt.bindString(4, txt50);
        }

        String zcharItem12 = entity.getZcharItem12();
        if (zcharItem12 != null) {
            stmt.bindString(5, zcharItem12);
        }

        String lease = entity.getLease();
        if (lease != null) {
            stmt.bindString(6, lease);
        }

        String zsczt = entity.getZsczt();
        if (zsczt != null) {
            stmt.bindString(7, zsczt);
        }

        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(8, status);
        }

        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(9, startDate.getTime());
        }

        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(10, endDate.getTime());
        }

        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(11, createdBy);
        }

        java.util.Date creationDate = entity.getCreationDate();
        if (creationDate != null) {
            stmt.bindLong(12, creationDate.getTime());
        }

        String lastUpdatedBy = entity.getLastUpdatedBy();
        if (lastUpdatedBy != null) {
            stmt.bindString(13, lastUpdatedBy);
        }

        java.util.Date lastUpdateDate = entity.getLastUpdateDate();
        if (lastUpdateDate != null) {
            stmt.bindLong(14, lastUpdateDate.getTime());
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    @Override
    public CocTaskHeaders readEntity(Cursor cursor, int offset) {
        CocTaskHeaders entity = new CocTaskHeaders( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskNum
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // kostl
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // txt50
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zcharItem12
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lease
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // zsczt
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // status
                cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // startDate
                cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // endDate
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // createdBy
                cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // creationDate
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lastUpdatedBy
                cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)) // lastUpdateDate
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, CocTaskHeaders entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTaskNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKostl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTxt50(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZcharItem12(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLease(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZsczt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStartDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setEndDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setCreatedBy(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreationDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setLastUpdatedBy(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLastUpdateDate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
    }

    @Override
    protected final String updateKeyAfterInsert(CocTaskHeaders entity, long rowId) {
        return entity.getId();
    }

    @Override
    public String getKey(CocTaskHeaders entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CocTaskHeaders entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
