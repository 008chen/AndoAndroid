package com.sq.domain.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.sq.domain.bean.GreenUser;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GREEN_USER".
*/
public class GreenUserDao extends AbstractDao<GreenUser, String> {

    public static final String TABLENAME = "GREEN_USER";

    /**
     * Properties of entity GreenUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", true, "UID");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
    }

    private DaoSession daoSession;


    public GreenUserDao(DaoConfig config) {
        super(config);
    }
    
    public GreenUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GREEN_USER\" (" + //
                "\"UID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uid
                "\"USERNAME\" TEXT);"); // 1: username
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GreenUser entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GreenUser entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
    }

    @Override
    protected final void attachEntity(GreenUser entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GreenUser readEntity(Cursor cursor, int offset) {
        GreenUser entity = new GreenUser( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uid
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // username
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GreenUser entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GreenUser entity, long rowId) {
        return entity.getUid();
    }
    
    @Override
    public String getKey(GreenUser entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GreenUser entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
